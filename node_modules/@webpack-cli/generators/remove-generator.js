"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const Generator = require("yeoman-generator");
const prop_types_1 = require("@webpack-cli/utils/prop-types");
const webpack_scaffold_1 = require("@webpack-cli/webpack-scaffold");
/**
 *
 * Generator for removing properties
 * @class	RemoveGenerator
 * @extends	Generator
 * @returns	{Void} After execution, transforms are triggered
 *
 */
class RemoveGenerator extends Generator {
    constructor(args, opts) {
        super(args, opts);
        this.configuration = {
            config: {
                webpackOptions: {},
            },
        };
        let configPath = path.resolve(process.cwd(), "webpack.config.js");
        const webpackConfigExists = fs.existsSync(configPath);
        if (!webpackConfigExists) {
            configPath = null;
            // end the generator stating webpack config not found or to specify the config
        }
        this.webpackOptions = require(configPath);
    }
    getPropTypes() {
        return Object.keys(this.webpackOptions);
    }
    getModuleLoadersNames() {
        if (typeof this.webpackOptions === "object") {
            if (this.webpackOptions.module && this.webpackOptions.module.rules) {
                return this.webpackOptions.module.rules.map((rule) => rule ? rule.loader : null);
            }
        }
    }
    prompting() {
        const done = this.async();
        let propValue;
        return this.prompt([
            webpack_scaffold_1.List("propType", "Which property do you want to remove?", Array.from(this.getPropTypes())),
        ])
            .then(({ propType }) => {
            if (!prop_types_1.default.has(propType)) {
                console.error("Invalid webpack config prop");
                return;
            }
            propValue = this.webpackOptions[propType];
            if (typeof propValue === "object") {
                if (Array.isArray(propValue)) {
                    return this.prompt([
                        webpack_scaffold_1.List("keyType", `Which key do you want to remove from ${propType}?`, Array.from(propValue)),
                    ]).then(({ keyType }) => {
                        this.configuration.config.webpackOptions[propType] = [keyType];
                    });
                }
                else {
                    return this.prompt([
                        webpack_scaffold_1.List("keyType", `Which key do you want to remove from ${propType}?`, Array.from(Object.keys(propValue))),
                    ])
                        .then(({ keyType }) => {
                        if (propType === "module" && keyType === "rules") {
                            return this.prompt([
                                webpack_scaffold_1.List("rule", "Which loader do you want to remove?", Array.from(this.getModuleLoadersNames())),
                            ])
                                .then(({ rule }) => {
                                if (typeof this.webpackOptions === "object") {
                                    const loaderIndex = this.getModuleLoadersNames().indexOf(rule);
                                    const loader = this.webpackOptions.module.rules[loaderIndex];
                                    this.configuration.config.webpackOptions.module = {
                                        rules: [loader],
                                    };
                                }
                            });
                        }
                        else {
                            // remove the complete prop object if there is only one key
                            if (Object.keys(this.webpackOptions[propType]).length <= 1) {
                                this.configuration.config.webpackOptions[propType] = null;
                            }
                            else {
                                this.configuration.config.webpackOptions[propType] = {
                                    [keyType]: null,
                                };
                            }
                        }
                    });
                }
            }
            else {
                this.configuration.config.webpackOptions[propType] = null;
            }
        })
            .then((_) => {
            done();
        });
    }
    writing() {
        this.config.set("configuration", this.configuration);
    }
}
exports.default = RemoveGenerator;
