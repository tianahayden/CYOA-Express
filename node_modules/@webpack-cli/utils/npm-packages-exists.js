"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const is_local_path_1 = require("./is-local-path");
const npm_exists_1 = require("./npm-exists");
const resolve_packages_1 = require("./resolve-packages");
const WEBPACK_SCAFFOLD_PREFIX = "webpack-scaffold";
/**
 *
 * Loops through an array and checks if a package is registered
 * on npm and throws an error if it is not.
 *
 * @param {String[]} pkg - Array of packages to check existence of
 * @returns {Array} resolvePackages - Returns an process to install the packages
 */
function npmPackagesExists(pkg) {
    const acceptedPackages = [];
    function resolvePackagesIfReady() {
        if (acceptedPackages.length === pkg.length) {
            return resolve_packages_1.resolvePackages(acceptedPackages);
        }
    }
    pkg.forEach((addon) => {
        if (is_local_path_1.default(addon)) {
            // If the addon is a path to a local folder, no name validation is necessary.
            acceptedPackages.push(addon);
            resolvePackagesIfReady();
            return;
        }
        // The addon is on npm; validate name and existence
        if (addon.length <= WEBPACK_SCAFFOLD_PREFIX.length ||
            addon.slice(0, WEBPACK_SCAFFOLD_PREFIX.length) !== WEBPACK_SCAFFOLD_PREFIX) {
            throw new TypeError(chalk_1.default.bold(`${addon} isn't a valid name.\n`) +
                chalk_1.default.red(`\nIt should be prefixed with '${WEBPACK_SCAFFOLD_PREFIX}', but have different suffix.\n`));
        }
        npm_exists_1.default(addon)
            .then((moduleExists) => {
            if (!moduleExists) {
                Error.stackTraceLimit = 0;
                throw new TypeError(`Cannot resolve location of package ${addon}.`);
            }
            if (moduleExists) {
                acceptedPackages.push(addon);
            }
        })
            .catch((err) => {
            console.error(err.stack || err);
            process.exit(0);
        })
            .then(resolvePackagesIfReady);
    });
}
exports.default = npmPackagesExists;
